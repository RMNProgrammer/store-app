import Head from 'next/head'
import { useRouter } from 'next/router'
import { isNumber } from '../../configs/validate'
import React, { useEffect, useState } from 'react'
import LayoutPage from '../../containers/LayoutPage'
import { useDispatch, useSelector } from 'react-redux'
import FormControl from '../../containers/FormControl'
import { GET_CART_PRODUCTS_INFO_ACTION, REMOVE_FROM_CART_ACTION } from '../../actions'
import { Paragraph, InputText, Button, InputNumber, Hyperlink } from '../../components'

const info = ({ user, logged }) => {
   const router = useRouter()
   const dispatch = useDispatch()
   const [message,setMessage] = useState(null)
   const [formValue,setFormValue] = useState({})
   const { userCart } = useSelector((state) => state.cart )

   useEffect(() => {
      if ( logged && user.id && user.id != '' ){
         dispatch(GET_CART_PRODUCTS_INFO_ACTION(user.id))
      }
   },[])

   const handleOnChange = (name,value) => {
      setFormValue({
         ...formValue,
         [name]: value,
      })
   }

   const handleSubmit = () => {
      if ( formValue.landline_phone && formValue.province && formValue.city && formValue.street && formValue.alley 
            && formValue.number && formValue.postal_code ){
         if ( !isNumber(formValue.number) || !isNumber(formValue.postal_code) || !isNumber(formValue.landline_phone) ){
            setMessage('مقدار شماره تلفن ثابت، کدپستی و یا پلاک به درستی وارد نشده اند.')
         }
         else{
            setMessage('در حال انتقال به صفحه پرداخت...')
            setFormValue({
               ...formValue,
               name: user.name,
               email: user.email,
               phone: user.phone
            })
            userCart.map((item) => {
               dispatch(REMOVE_FROM_CART_ACTION(user.id,item.id))
            })               
            router.push('/checkout/success')
         }
      }
      else{
         setMessage('لطفا فیلد های زیر را تکمیل کرده و مجدد اقدام کنید.')
      }
   }

   return (
      <>
         <Head>
            <title>تسویه حساب</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
         </Head>
         <LayoutPage>
            { !logged && 
               <div className='alert'>
                  <Paragraph align='center'>برای نهایی کردن خرید خود ابتدا در سایت لاگین کنید</Paragraph>
               </div>
            }
            { logged && 
               <> 
                  <Paragraph align='center' topGap='1.5rem' type='primary'>
                     { message ? message : 'لطفا ابتدا اطلاعات زیر را تکمیل کرده و سپس با کلیک روی دکمه ی پرداخت، سفارش خود را نهایی کنید' }
                  </Paragraph> 
                  <form className='form'>
                     <div className='columns'>
                        <FormControl>
                           <InputText value={user.name} disabled />
                        </FormControl> 
                        <FormControl>
                           <InputNumber value={user.phone} disabled />
                        </FormControl>               
                        <FormControl>
                           <InputText placeholder='استان' onChange={(value) => handleOnChange('province',value)} />
                        </FormControl>
                        <FormControl>
                           <InputText placeholder='خیابان' onChange={(value) => handleOnChange('street',value)} />
                        </FormControl>
                        <FormControl>
                           <InputNumber placeholder='پلاک' onChange={(value) => handleOnChange('number',value)} />
                        </FormControl>
                     </div>
                     <div className='columns'>
                        <FormControl>
                           <InputText value={user.email} disabled />
                        </FormControl>           
                        <FormControl>
                           <InputNumber placeholder='تلفن ثابت' onChange={(value) => handleOnChange('landline_phone',value)} />
                        </FormControl>
                        <FormControl>
                           <InputText placeholder='شهر / شهرستان' onChange={(value) => handleOnChange('city',value)} />
                        </FormControl>
                        <FormControl>
                           <InputText placeholder='کوچه / فرعی' onChange={(value) => handleOnChange('alley',value)} />
                        </FormControl>
                        <FormControl>
                           <InputNumber placeholder='کد پستی' onChange={(value) => handleOnChange('postal_code',value)} />
                        </FormControl> 
                     </div>
                     <div className='small'>
                        <FormControl>
                           <InputText value={user.name} disabled />
                        </FormControl>
                        <FormControl>
                           <InputText value={user.email} disabled />
                        </FormControl> 
                        <FormControl>
                           <InputNumber value={user.phone} disabled />
                        </FormControl>                  
                        <FormControl>
                           <InputNumber placeholder='تلفن ثابت' onChange={(value) => handleOnChange('landline_phone',value)} />
                        </FormControl>
                        <FormControl>
                           <InputText placeholder='استان' onChange={(value) => handleOnChange('province',value)} />
                        </FormControl>                  
                        <FormControl>
                           <InputText placeholder='شهر / شهرستان' onChange={(value) => handleOnChange('city',value)} />
                        </FormControl>
                        <FormControl>
                           <InputText placeholder='خیابان' onChange={(value) => handleOnChange('street',value)} />
                        </FormControl>
                        <FormControl>
                           <InputText placeholder='کوچه / فرعی' onChange={(value) => handleOnChange('alley',value)} />
                        </FormControl>
                        <FormControl>
                           <InputNumber placeholder='پلاک' onChange={(value) => handleOnChange('number',value)} />
                        </FormControl>
                        <FormControl>
                           <InputNumber placeholder='کد پستی' onChange={(value) => handleOnChange('postal_code',value)} />
                        </FormControl> 
                     </div>
                  </form>
                  <div className='links'>
                     <Button buttonModel='secondary' onClick={handleSubmit}>
                        پرداخت
                     </Button>
                     <br/>
                     <br/>
                     <Hyperlink type='secondary' display='inline-block' href='/checkout/cart'>
                        <Button buttonModel='secondary' justBorder>
                           بازگشت به مرحله قبل
                        </Button>
                     </Hyperlink>
                  </div>
               </>
            }
         </LayoutPage>
         <style jsx>{`
            .alert{
               height:62vh;
               display:flex;
               align-items:center;
               flex-direction:column;
               justify-content:center;
            }
            
            .form{
               margin: 1rem 0;
               text-align: center;
            }

            .columns{
               display: inline-block;
            }

            .small{
               display: none;
            }

            .links{
               display: block;
               text-align: center;
            }

            @media (min-width: 320px) and (max-width: 700px) {
               .small,.form{
                  display: block;
                  min-width: 320px;
               }

               .columns{
                  display: none;
               }
            }

            @media (min-width: 700px) and (max-width: 1200px){
               .columns{
                  min-width: 350px;
               }
            }

            @media (min-width: 1200px) and (max-width: 1700px){
               .columns{
                  min-width: 490px;
               }
            }

            @media (min-width: 1700px) and (max-width: 2300px){
               .columns{
                  min-width: 700px;
               }
            }

            @media (min-width: 2300px){
               .columns{
                  min-width: 900px;
               }
            }
         `}</style>
      </>
   )
}

info.getInitialProps = async ({ reduxStore }) => {
   let userData = {}
   const { auth } = reduxStore.getState()
   if ( auth.logged ){ userData = auth.data }
   return { user: userData, logged: auth.logged }
}

export default info