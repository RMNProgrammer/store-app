import Head from 'next/head'
import React, { useState } from 'react'
import { useRouter } from 'next/router'
import LayoutAuth from '../containers/LayoutAuth'
import FormControl from '../containers/FormControl'
import { useDispatch, useSelector } from 'react-redux'
import { REGISTER_ACTION, GET_USER_INFO_ACTION } from '../actions'
import { validateEmail, validatePhone, validatePassword } from '../configs/validate'
import { H3, InputText, InputEmail, InputNumber, InputPassword, Small, Alert, Button, Hyperlink } from '../components'

const Register = ({ users }) => {
   let registered = false
   const router = useRouter()
   const dispatch = useDispatch()
   const [Errors,setError] = useState({})
   const [message,setMessage] = useState(null)
   const [formValue,setFormValue] = useState({})
   const auth = useSelector((state) => state.auth )

   const handleSubmit = (event) => {
      if (event) event.preventDefault()
      if( formValue.name && formValue.email && formValue.phone && formValue.password ){
         setMessage('لطفا خطای هر فیلد را برطرف کرده و مجدد تلاش کنید')
         if( !(validateEmail(formValue.email)) ){
            setError({ 
               ...Errors,
               Email: "ایمیل معتبر نیست" 
            })
         }
         else if( !(validatePhone(formValue.phone)) ){
            setError({ 
               ...Errors,
               Phone: "شماره همراه معتبر نیست، لطفا شماره همراه خود را بدون 0 وارد کنید" 
            })
         }
         else if( !(validatePassword(formValue.password)) ){
            setError({
               ...Errors,
               Password: "رمز عبور باید حداقل دارای 8 کاراکتر، یک عدد، یک حرف بزرگ و یک حرف کوچک انگلیسی باشد"
            })
         }
         else{
            setError({})
            setMessage(null)
            formValue.phone = Number(formValue.phone)
            users.map((user) => {
               if ( user.email == formValue.email || user.phone == formValue.phone ){ registered = true }
            })
            if ( !registered ){
               setMessage('کاربر موردنظر با موفقیت ثبت نام شد')
               dispatch(REGISTER_ACTION(formValue))
               router.push('/login')
            }
            else{
               setMessage('کاربر موردنظر قبلا ثبت نام کرده است')
            }
         }
      }
      else{
         setMessage('لطفا فیلد های زیر را تکمیل کرده و مجدد اقدام کنید')
      }
   }

   const handleOnChange = (name,value) => {
      setFormValue({
         ...formValue,
         [name]: value,
      })
   }

   return (
      <>
         <Head>
            <title>ثبت نام</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <LayoutAuth>
            <H3>ثبت نام کنید</H3>
            { message && <Alert>{message}</Alert> }
            <form onSubmit={handleSubmit}>
               <FormControl>
                  <InputText onChange={(value) => handleOnChange('name',value)} placeholder='نام و نام خانوادگی' />
               </FormControl>
               <FormControl>
                  <InputEmail onChange={(value) => handleOnChange('email',value)} placeholder='ایمیل'/>
                  {Errors.Email && <Small color='red'>{Errors.Email}</Small>}
               </FormControl>
               <FormControl>
                  <InputNumber onChange={(value) => handleOnChange('phone',value)} placeholder='شماره همراه' />
                  {Errors.Phone && <Small color='red'>{Errors.Phone}</Small>}
               </FormControl>
               <FormControl>
                  <InputPassword onChange={(value) => handleOnChange('password',value)} placeholder='رمز عبور' />
                  {Errors.Password && <Small color='red'>{Errors.Password}</Small>}
               </FormControl>
               <FormControl>
                  <Button type='submit' buttonModel='secondary' loading={auth.loading} widthAll>ثبت نام</Button>
               </FormControl>
               <div>
                  <Hyperlink href='/login'>وارد شوید</Hyperlink>
               </div> 
            </form>
         </LayoutAuth>
         <style jsx>{`
            div{ padding:10px; }
         `}</style>
      </>
   )
}

Register.getInitialProps = async ({ reduxStore }) => {
   await reduxStore.dispatch(GET_USER_INFO_ACTION())
   const { auth } = reduxStore.getState()
   return { users: auth.users }
}

export default Register